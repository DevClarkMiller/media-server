{"ast":null,"code":"import api from './api';\nconst verboseErrorOutput = err => {\n  if (err.response) {\n    console.log(err.response.data);\n    console.log(err.response.status);\n    console.log(err.response.headers);\n    console.log(`Error: ${err.response.data.error}`);\n  } else {\n    console.log(`Error: ${err.message}`);\n  }\n};\nconst get = async (path, params) => {\n  let response;\n  try {\n    if (params) {\n      const fullUrl = path + '?' + new URLSearchParams(params).toString();\n      response = await api.get(fullUrl);\n    } else {\n      response = await api.get(path);\n    }\n    return response;\n  } catch (err) {\n    verboseErrorOutput(err);\n  }\n};\nconst post = async (path, data, config) => {\n  try {\n    const response = config ? await api.post(path, data) : await api.post(path, data, config);\n    return response;\n  } catch (err) {\n    verboseErrorOutput(err);\n  }\n};\nexport default {\n  get,\n  post\n};","map":{"version":3,"names":["api","verboseErrorOutput","err","response","console","log","data","status","headers","error","message","get","path","params","fullUrl","URLSearchParams","toString","post","config"],"sources":["C:/projects/media-server/media-server-front-end/src/functions/fetch.js"],"sourcesContent":["import api from './api'\r\n\r\nconst verboseErrorOutput = (err) =>{\r\n    if(err.response){\r\n        console.log(err.response.data);\r\n        console.log(err.response.status);\r\n        console.log(err.response.headers);\r\n        console.log(`Error: ${err.response.data.error}`);\r\n      }else{\r\n        console.log(`Error: ${err.message}`);\r\n    }  \r\n}\r\n\r\nconst get = async (path, params) =>{\r\n    let response;\r\n    try{\r\n        if(params){\r\n            const fullUrl = path + '?' + new URLSearchParams(params).toString();\r\n            response = await api.get(fullUrl);   \r\n        }else{\r\n            response = await api.get(path);\r\n        }\r\n        return response;\r\n    }catch(err){\r\n        verboseErrorOutput(err);\r\n    }\r\n}\r\n\r\nconst post = async (path, data, config) =>{\r\n    try{\r\n        const response = (config) ? await api.post(path, data) : await api.post(path, data, config);\r\n        return response;\r\n    }catch(err){\r\n        verboseErrorOutput(err);\r\n    }\r\n}\r\n\r\nexport default {\r\n    get, post\r\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,kBAAkB,GAAIC,GAAG,IAAI;EAC/B,IAAGA,GAAG,CAACC,QAAQ,EAAC;IACZC,OAAO,CAACC,GAAG,CAACH,GAAG,CAACC,QAAQ,CAACG,IAAI,CAAC;IAC9BF,OAAO,CAACC,GAAG,CAACH,GAAG,CAACC,QAAQ,CAACI,MAAM,CAAC;IAChCH,OAAO,CAACC,GAAG,CAACH,GAAG,CAACC,QAAQ,CAACK,OAAO,CAAC;IACjCJ,OAAO,CAACC,GAAG,CAAC,UAAUH,GAAG,CAACC,QAAQ,CAACG,IAAI,CAACG,KAAK,EAAE,CAAC;EAClD,CAAC,MAAI;IACHL,OAAO,CAACC,GAAG,CAAC,UAAUH,GAAG,CAACQ,OAAO,EAAE,CAAC;EACxC;AACJ,CAAC;AAED,MAAMC,GAAG,GAAG,MAAAA,CAAOC,IAAI,EAAEC,MAAM,KAAI;EAC/B,IAAIV,QAAQ;EACZ,IAAG;IACC,IAAGU,MAAM,EAAC;MACN,MAAMC,OAAO,GAAGF,IAAI,GAAG,GAAG,GAAG,IAAIG,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;MACnEb,QAAQ,GAAG,MAAMH,GAAG,CAACW,GAAG,CAACG,OAAO,CAAC;IACrC,CAAC,MAAI;MACDX,QAAQ,GAAG,MAAMH,GAAG,CAACW,GAAG,CAACC,IAAI,CAAC;IAClC;IACA,OAAOT,QAAQ;EACnB,CAAC,QAAMD,GAAG,EAAC;IACPD,kBAAkB,CAACC,GAAG,CAAC;EAC3B;AACJ,CAAC;AAED,MAAMe,IAAI,GAAG,MAAAA,CAAOL,IAAI,EAAEN,IAAI,EAAEY,MAAM,KAAI;EACtC,IAAG;IACC,MAAMf,QAAQ,GAAIe,MAAM,GAAI,MAAMlB,GAAG,CAACiB,IAAI,CAACL,IAAI,EAAEN,IAAI,CAAC,GAAG,MAAMN,GAAG,CAACiB,IAAI,CAACL,IAAI,EAAEN,IAAI,EAAEY,MAAM,CAAC;IAC3F,OAAOf,QAAQ;EACnB,CAAC,QAAMD,GAAG,EAAC;IACPD,kBAAkB,CAACC,GAAG,CAAC;EAC3B;AACJ,CAAC;AAED,eAAe;EACXS,GAAG;EAAEM;AACT,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}